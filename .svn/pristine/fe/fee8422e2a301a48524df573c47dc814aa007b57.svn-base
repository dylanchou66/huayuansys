<?php

namespace app\admin\controller;

use app\common\controller\Backend;
use function Qiniu\explodeUpToken;


/**
 * 
 *
 * @icon fa fa-circle-o
 */
class Task extends Backend
{
    
    /**
     * Task模型对象
     * @var \app\admin\model\Task
     */
    protected $model = null;

    public function _initialize()
    {
        parent::_initialize();
        $this->model = new \app\admin\model\Task;

    }

    public function import()
    {
        parent::import();
    }

    /**
     * 默认生成的控制器所继承的父类中有index/add/edit/del/multi五个基础方法、destroy/restore/recyclebin三个回收站方法
     * 因此在当前控制器中可不用编写增删改查的代码,除非需要自己控制这部分逻辑
     * 需要将application/admin/library/traits/Backend.php中对应的方法复制到当前控制器,然后进行修改
     */


    /**
     * 查看待审核
     */
    public function index()
    {
        //当前是否为关联查询
        $this->relationSearch = true;
        //设置过滤方法
        $this->request->filter(['strip_tags', 'trim']);

        if ($this->request->isAjax()) {

            //先判断当前用户 所负责的审核
            $c = new \app\admin\model\Check();
            $quanxian = $c->find();
            $quanxian = $quanxian->toArray();
            $qres = array_search($this->auth->id,$quanxian);

            switch($qres){
                case 'check_leder_id':
                    $field = 'leder';
                    break;
                case 'check_order_id':
                    $field ='order';
                    $w['leder_status'] = 1;
                    break;
                case 'check_boss_id':
                    $field ='boss';
                    $w['leder_status'] = 1;
                    $w['order_status'] = 1;
                    break;
                case 'check_money_id':
                    $field ='money';
                    $w['leder_status'] = 1;
                    $w['order_status'] = 1;
                    $w['boss_status'] = 1;
                    break;
                case 'check_pay_id':
                    $field ='pay';
                    $w['leder_status'] = 1;
                    $w['order_status'] = 1;
                    $w['boss_status'] = 1;
                    $w['money_status'] = 1;
                    break;
            }

            //条件
//            $whereor['leder_id'] = $this->auth->id;
//            $whereor['order_id'] = $this->auth->id;
//            $whereor['boss_id'] = $this->auth->id;
//            $whereor['money_id'] = $this->auth->id;
//            $whereor['pay_id'] = $this->auth->id;
            //个别用户除外
            if($this->auth->id == 1){
                $w = '';
            }else{
                $w[$field.'_id'] = $this->auth->id; //当前用户
                $w[$field.'_status'] = null;  //已审核的条件
                $w['check_status'] = null; //完成
            }




            //如果发送的来源是Selectpage，则转发到Selectpage
            if ($this->request->request('keyField')) {

                return $this->selectpage();
            }

            list($where, $sort, $order, $offset, $limit) = $this->buildparams();

            $list = $this->model
                    ->with(['admin','carpay','dictv','dict'])
                //这是闭包
//                    ->whereor(function ($query) use ($whereor){
//                        $query->whereor($whereor);
//            })
                    ->where($where)
                    ->where($w)
                    ->order($sort, $order)
                    ->paginate($limit);
//            dump($this->model->getLastSql());exit;
            foreach ($list as $key => $row) {
                    $row->getRelation('admin')->visible(['id','nickname']);
                    $row->getRelation('carpay')->visible(['id','pay_type_id','car_id']);
                    $row->getRelation('dictv')->visible(['id','name']);
                    $row->getRelation('dict')->visible(['id','name']);
            }

            $result = array("total" => $list->total(), "rows" => $list->items());

            return json($result);
        }

        return $this->view->fetch();

    }

    //审批操作
    public function check(){

        //先判断是否操作过了
//        $id = isset($id) ? $_GET['id'] : '';
        //操作时间增加
        $id = input('id');
        if($id){
            $nid = $this->model->where('orders_id',$id)->field('id')->find()->toArray();
            $check = input('type');
            $T = new \app\admin\model\Task();
            //先查出审核数据
            $trres = $T->where('id',$nid['id'])->field(array('leder_id','order_id','boss_id','money_id','pay_id'))->find();

            //检查是否正常流程
            $checkres = array_search($this->auth->id,$trres->toArray());
            if(!$checkres){
                $this->error('网络错误，请联系管理员。');
            }else{
                //处理字段名
                $status = explode('_',$checkres);
                $new = $status[0].'_status';
                $w['id'] = $nid['id'];
//            $up[$new] = $check;
                $up[$status[0].'_time'] = time();
                if($new == 'pay_status'){
//                $up['check_status'] = 1;
                }
                $res = $T->where($w)->update($up);
                if($res == 1){
                    $this->success('审批成功');
                }else{
                    $this->error('网络错误，请联系管理员。');
                }
            }
        }else{

        }
    }

    public function jindu($ids){
        //查出taskid
        $car = new \app\admin\model\CarPay();
        $res = $car->where('id',$ids)->field('task_id')->find();
        $res = $res->toArray();
        $row = $this->model->get(['id' => $res['task_id']]);
        if (!$row) {
            $this->error(__('No Results were found'));
        }
        if ($this->request->isAjax()) {
            $this->success("Ajax请求成功", null, ['id' => $ids]);
        }
//        dump($row);exit;
        $this->view->assign("row", $row->toArray());
        $this->view->assign("id", $ids);
        return $this->view->fetch();
    }
    //查看所有审核单
//    public function all()
//    {
//        //当前是否为关联查询
//        $this->relationSearch = true;
//        //设置过滤方法
//        $this->request->filter(['strip_tags', 'trim']);
//        if ($this->request->isAjax()) {
//
//            //如果发送的来源是Selectpage，则转发到Selectpage
//            if ($this->request->request('keyField')) {
//                return $this->selectpage();
//            }
//            list($where, $sort, $order, $offset, $limit) = $this->buildparams();
//
//            $list = $this->model
//                ->with(['admin','carpay','dictv','dict'])
//
//                ->where($where)
//                ->order($sort, $order)
//                ->paginate($limit);
//            foreach ($list as $key => $row) {
//                $row->getRelation('admin')->visible(['id','nickname']);
//                $row->getRelation('carpay')->visible(['id','pay_type_id','car_id']);
//                $row->getRelation('dictv')->visible(['id','name']);
//                $row->getRelation('dict')->visible(['id','name']);
//            }
//
//            $result = array("total" => $list->total(), "rows" => $list->items());
//
//            return json($result);
//        }
//        return $this->view->fetch();
//    }

}
